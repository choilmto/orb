description: >
  "Add this job to your workflow with no require statements. This job will run in parallel with the rest of your workflow for monitoring and will exit when all other jobs have completed."
parameters:
  circle-token:
    type: env_var_name
    default: "CIRCLE_TOKEN"
    description: "Enter your CircleCI Personal Access Token for interacting with the API. You may generate one here: https://circleci.com/account/api"
  org-name:
    type: string
    description: "Enter the name your organization uses in CircleCI."
  vcs-slug:
    type: string
    description: "Enter the slug used to manage your repo ('gh' for github or 'bb' for bitbucket)."
  workflow-name:
    type: string
    default: "build"
    description: "Enter the name of the build step to be measured."
executor: default
steps:
  - jq/install
  - checkout
  - run:
      name: Workflow Collector
      command: |
        ###############
        # Begin Collecting
        ###############
        DATA_URL="https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job?circle-token=$<< parameters.circle-token >>"
        WF_DATA=$(curl -s "$DATA_URL")
        WF_MESSAGE=$(echo "$WF_DATA" | jq '.message')

        # Exit if no Workflow.
        if [ "$WF_MESSAGE" = "\"Workflow not found\"" ];
        then
          echo "No Workflow was found."
          echo "Your circle-token parameter may be wrong or you do not have access to this Workflow."
          exit 1
        fi
        WF_ITEMS=$(echo "$WF_DATA" | jq '.items')
        WF_LENGTH=$(echo "$WF_ITEMS" | jq length)
        # GET URL PATH DATA
        VCS_SHORT=$(echo $CIRCLE_BUILD_URL | cut -d"/" -f4)
        case $VCS_SHORT in
          gh)
            VCS=github
            ;;
          bb)
            VCS=bitbucket
            ;;
          *)
            echo "No VCS found. Error" && exit 1
            ;;
        esac
        # Assume the WF is currently running
        WF_FINISHED=false
        echo -e "Jobs in Workflow: $WF_LENGTH \n"
        # Exit if no other jobs in the Workflow.
        if [ "$WF_LENGTH" -lt 2 ];
        then
          echo "Only a single job has been found in the workflow, indicating this reporter is the only job in the pipeline."
          echo "Please add other jobs to the Workflow you wish to collect data on to send to Sumologic"
          exit 0
        fi
        #####################
        ## START MAIN LOOP ##
        #####################
        # Check the status of all jobs in the workflow that are not this job and wait until they have all finished.
        while [ "$WF_FINISHED" = false ]
        do
          WF_DATA=$(curl -s "$DATA_URL" | jq '.items')
          echo "Waiting for other jobs to finish..."
          # for each job in the workflow fetch the status.
          # the WF_FINISHED will be assumed true unless one of the jobs in the Workflow is still running
          # the flag will then be set back to false.
          WF_FINISHED=true
          i="0"
          ################
          ### JOB LOOP ###
          ################
          while [ $i -lt "$WF_LENGTH" ]
          do
            echo "looping: $i"
            # fetch the job info
            JOB_DATA=$(echo "$WF_DATA" | jq --arg i "$i" ".[$i]")
            JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
            JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
            JOB_NAME=$(echo "$JOB_DATA" | jq ".name")
            # Only check the job if it is not this current job
            if [ "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
            then
              echo "This is the reporter job. Skipping"
            else
              # If this job is NOT the current job, check the status
              echo "JOB: $JOB_NAME"
              echo "JOB NUM: $JOB_NUMBER"
              echo "STATUS: $JOB_STATUS"
              if [ "$JOB_STATUS" == '"success"' ] || [ "$JOB_STATUS" == '"failed"' ];
              then
                echo "Job $JOB_NAME $JOB_NUMBER is complete - $JOB_STATUS"
              elif [ "$JOB_STATUS" == '"on_hold"' ] || [ "$JOB_STATUS" == '"blocked"' ];
              then
                # The condition to not block metrics sending when workflow use manually approved steps or is blocked.
                echo "Job $JOB_NAME $JOB_NUMBER need manual approval - $JOB_STATUS - skipping"
              else
                # If it is still running, then mark WF_FINISHED as false.
                WF_FINISHED=false
                echo "Setting status of WF_FINISHED to false"
              fi
            fi
            echo "rerunning loop"
            i="$((i+1))"
            echo "increment loop to $i"
            echo " ---------- "
            echo
          done
          echo "Waiting 10 seconds"
          sleep 10
        done
        echo
        ################
        # WF COMPLETE  #
        ################
        echo
        echo "-------------------------------"
        echo "All jobs in Workflow complete."
        echo "Sending final report."
        echo "-------------------------------"
        echo
        echo
        ########################################
        # Send end-of-workflow jobs data to logger
        ########################################
        echo "SENDING FINAL JOB INFORMATION"
        i=0
        while [ $i -lt "$WF_LENGTH" ]
          do
            echo "looping: $i"
            # fetch the job info
            JOB_DATA=$(echo "$WF_DATA" | jq --arg i "$i" ".[$i]")
            JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
            JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
            JOB_NAME=$(echo "$JOB_DATA" | jq ".name")

            # Only check the job if it is not this current job
            if [ "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
            then
              echo "This is the reporter job. Skipping"
            elif [ $JOB_NAME = << parameters.workflow-name >> ];
            then
              JOB_URL="https://circleci.com/api/v2/project/<< parameters.vcs-slug >>/<< parameters.org-name >>/$CIRCLE_PROJECT_REPONAME/job/$JOB_NUMBER"
              JOB_DATA=$(curl -s -u ${CIRCLE_TOKEN}: "$JOB_URL")
              JOB_DURATION=$(echo "$JOB_DATA" | jq ".duration")
              VERSION=$(cat package.json | jq ".version")

              npm install
              JOB_DURATION=$JOB_DURATION PULL_REQUESTS=$CIRCLE_PULL_REQUESTS VERSION=$VERSION npm run log:build_time

              # If this job is NOT the current job, check the status
              echo "JOB: $JOB_NAME"
              echo "JOB NUM: $JOB_NUMBER"
              echo "STATUS: $JOB_STATUS"
            fi
            echo "rerunning loop"
            i="$((i+1))"
            echo "increment loop to $i"
            echo " ---------- "
            echo
          done
          echo "Your logs have been sent."
